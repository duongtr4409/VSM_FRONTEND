<template>
	<v-card elevation="0" ref="form">
		<v-toolbar flat color="grey lighten-4 max-h-[2.5rem]">
			<v-toolbar-title class="mb-5">
				{{ $t("button.confirming") }}
			</v-toolbar-title>
			<v-spacer></v-spacer>
			<v-btn icon @click="close" class="mb-5">
				<v-icon>mdi-close</v-icon>
			</v-btn>
		</v-toolbar>
		<v-card-text class="white">
			<v-container>
				<v-form v-model="valid">
					<v-row>
						<v-col cols="12" sm="12" md="12">
							<v-textarea
								dense
								outlined
								v-model="signDto.reason"
								maxLength="500"
							>
								<template v-slot:label>
									{{ $t("label.mail_template_content") }}
									<span class="text-red-600">
										{{ $t("label.star") }}
									</span>
								</template>
							</v-textarea>
						</v-col>

						<v-col cols="12" sm="12" md="12">
							<v-select
								:menu-props="{ bot: true, offsetY: true }"
								:items="list_form_digitalSignture"
								item-text="name_DigitalSignture"
								:label="$t('label.select_digital_signture')"
								outlined
								:item-value="(item) => item.id_DigitalSignture"
								dense
								v-model="signDto.signType"
							>
							</v-select>
						</v-col>

						<!-- <v-col cols="12" sm="12" md="12">
								<v-text-field
									:label="
										$t('label.rental_code_phone_number')
									"
									outlined
									dense
								></v-text-field>
							</v-col> -->
						<v-col
							v-if="signDto.signType == signType.SOFT"
							cols="12"
							sm="12"
							md="12"
						>
							<v-text-field
								:label="$t('title.password')"
								outlined
								dense
								v-model="signDto.password"
								type="password"
							>
							</v-text-field>
						</v-col>
						<v-col
							v-if="signDto.signType == signType.SIM"
							cols="12"
							sm="12"
							md="12"
						>
							<v-text-field
								:label="$t('label.numberphone')"
								outlined
								dense
								v-model="numberPhone"
								prefix="(+84)"
							></v-text-field>
						</v-col>
						<v-col
							cols="12"
							sm="12"
							md="12"
							v-if="signDto.signType == signType.SOFT"
						>
							<v-text-field
								:label="$t('label.sign_position')"
								outlined
								dense
								v-model="signDto.symbol"
							>
							</v-text-field>
						</v-col>
						<v-col
							cols="12"
							sm="12"
							md="12"
							v-if="signDto.signType == signType.TOKEN"
						>
							<v-select
								:menu-props="{ bot: true, offsetY: true }"
								:items="tokenType"
								item-text="name_TokenType"
								:label="$t('label.select_token_type')"
								outlined
								:item-value="(item) => item.id_TokenType"
								dense
								v-model="tokenChoice"
							></v-select>
						</v-col>
					</v-row>
				</v-form>
			</v-container>
		</v-card-text>
		<v-card-actions class="white">
			<v-spacer></v-spacer>
			<v-btn
				color="blue darken-1"
				elevation="0"
				dark
				class="rounded-0"
				@click="sign()"
			>
				{{ $t("button.ok") }}
			</v-btn>
			<v-btn
				color="grey lighten-4"
				elevation="0"
				class="rounded-0"
				@click="close"
			>
				{{ $t("button.cancel") }}
			</v-btn>
		</v-card-actions>
	</v-card>
</template>

<script>
import globalService from "@/services/global.service";
import SignDto from "@/models/sign.dto";
import constant from "@/common/constant";
import ReqDataProcessHisDto from "@/models/req-data-process-his.dto";
import SIGN_TYPE from "@/common/SIGN_TYPE";
import signApi from "@/views/modules/khai-phieu-yeu-cau/sign.api";
import customerAPI from "../../administrator/customer.api";
export default {
	name: "VSMFEDigitalSignRequestFormV2",
	menu: false,
	props: { request: {}, signData: {}, otp: { default: "" }, param: { default : ""} },
	watch: {
		async request(newValue) {
			this.m_requestData = newValue;
			this.signDto.reason = "";
			this.signDto.password = "";
			this.signDto.msisdn = "";
			this.signDto = Object.assign({}, SignDto);
			this.files = [];
		},
		signData(value) {
			this.m_signData = value;
		},
	},

	data() {
		return {
			isDragOver: false,
			requestProcessHis: ReqDataProcessHisDto,
			signType: SIGN_TYPE,
			time: "",
			expiryDate: "",
			file: null,
			m_requestData: null,
			signDto: SignDto,
			attachmentFiles: [],
			files: [],
			file_name: [],
			listSignture: [],
			list_form_digitalSignture: [
				{
					id_DigitalSignture: SIGN_TYPE.SIM,
					name_DigitalSignture: this.$t("label.sign_sim"),
				},
				{
					id_DigitalSignture: SIGN_TYPE.TOKEN,
					name_DigitalSignture: this.$t("label.sign_token"),
				},
			],
			form_digitalSignture: "",
			signFiles: [],
			imageSign:
				"",
			tokenType: [
				// {
				// 	id_TokenType: SIGN_TYPE.SIGN_TYPE_TOKEN.VIETTEL,
				// 	name_TokenType: this.$t("label.sign_token_viettel"),
				// },
				{
					id_TokenType: SIGN_TYPE.SIGN_TYPE_TOKEN.MOBIFONE,
					name_TokenType: this.$t("label.sign_token_mobifone"),
				},
			], // danh sách kiểu ký tocken
			tokenChoice: "",
			m_otp: "",
		};
	},

	async mounted() {
		this.m_signData = this.signData;
		this.m_otp = this.otp;
	},
	created() {
		this.m_requestData = this.request;
		this.m_otp = this.otp;
	},

	methods: {
		close() {
			this.signDto.reason = "";
			this.signDto.password = "";
			this.signDto.msisdn = "";
			this.file_name = [];
			this.files = [];
			this.signDto = Object.assign({}, SignDto);
			this.$emit("close", false);
		},
		handleFileUpload(event) {
			this.file = event;
		},
		async sign() {
			let response;
			if (this.signDto.reason.trim() == "") {
				return this.toastError(this.$t("error.content_not_empty"));
			}
			try {
				let signed = false;
				if (this.signDto.signType == SIGN_TYPE.TOKEN) {
					if (
						this.tokenChoice == SIGN_TYPE.SIGN_TYPE_TOKEN.MOBIFONE
					) {
						signed = await this.signTokenMofiFone();
					} else if (
						this.tokenChoice == SIGN_TYPE.SIGN_TYPE_TOKEN.VIETTEL
					) {
						signed = await this.signTokenViettel();
					}
					if (!signed) {
						this.toastError(this.$t("error.sign"));
						this.$emit("saveSigned", false);
						this.$emit("close", false);
						return;
					}
					this.toastSuccess(this.$t("label.signed_successfully"));
					this.$emit("saveSigned", true);
					this.$emit("close", true);
				} else if (
					this.signDto.signType == SIGN_TYPE.SIM &&
					this.m_requestData
				) {
					if (this.numberPhone) {
						let startIndex = this.numberPhone.charAt(0);
						let checkNumberPhone = this.numberPhone.slice(0, 2);
						if (startIndex == 0) {
							this.signDto.msisdn =
								"84" + this.numberPhone.slice(1);
							this.numberPhone = this.numberPhone.slice(1);
						} else if (checkNumberPhone == "84") {
							this.signDto.msisdn = this.numberPhone;
							this.numberPhone = this.numberPhone.slice(2);
						} else {
							this.signDto.msisdn = "84" + this.numberPhone;
						}
					}
					this.signDto.requestDataList = [this.m_requestData.id];
					this.signDto.userId = null;
					response = await globalService.postData_Async(
						customerAPI.API_SignAnonymous(this.m_otp),
						this.signDto,
					);
					// if (!response) {
					// 	return this.toastError(this.$t("error.sign"));
					// }
					// if (!response.state) {
					// 	return this.toastError(response.messgage);
					// }
					if (!response || !response.state) {
						this.toastError(this.$t("error.sign"));
						this.$emit("saveSigned", false);

						this.$emit("close", false);
						return;
					}
					let response_approve =  await globalService.postData_Async(
						customerAPI.API_ProcessAnonymous(
							this.m_otp,
						),
						{
							action: 'Agree',
							requestData: this.param
						}
					);
					if (!response_approve || !response_approve.state) {
						this.toastError(this.$t("error.fail"));
						this.$emit("saveSigned", false);

						this.$emit("close", false);
						return;
					}

					this.toastSuccess(this.$t("label.signed_successfully"));
					this.$emit("saveSigned", true);

					this.$emit("close", true);
				}
			} catch (error) {
				this.toastError(error);
				return;
			} finally {
				this.files = [];
				this.file_name = [];
				this.signDto.reason = "";
				this.numberPhone = "";
				this.signDto.password = "";
				this.signDto.msisdn = "";
				this.signDto = Object.assign({}, SignDto);
			}
		},
		handleFile(files) {
			if (this.file_name.indexOf(files.target.value) != -1) return;
			this.file_name.push(files.target.value);
			this.files = this.files.concat(Array.from(files.target.files));
			for (let file of this.files) {
				let ext = file.name.split(".").pop();
				let arr = ["docx", "pdf", "xlsx", "pptx", "jpg", "jpeg"];
				if (!arr.includes(ext)) {
					return (
						this.toastError(this.$t("error.extFile")),
						(this.files = null)
					);
				}
			}
			files.target.value = null;
		},
		onDrop(event) {
			event.preventDefault();
			this.isDragOver = false;
			if (event.dataTransfer) {
				this.files = Array.from(event.dataTransfer.files);
			}
		},
		onDragEnd(event) {
			event.preventDefault();
			this.isDragOver = false;
		},
		onDragEnter(event) {
			event.preventDefault();
			this.isDragOver = true;
		},
		onDragLeave(event) {
			event.preventDefault();
			this.isDragOver = false;
		},
		onDragOver(event) {
			event.preventDefault();
			this.isDragOver = true;
		},
		onClick(event) {
			event.preventDefault();
			let files = document.getElementById(constant.keys.files);
			files.click();
		},
		remove(file) {
			let index = this.files.indexOf(file);
			this.files.splice(index, 1);
		},

		async getFiles() {
			let response;
			this.signFiles = [];
			response = await globalService.getData_Async(
				customerAPI.API_GetAllAttachmentFileByRequestDataIdHasSign(
					this.param/*this.m_requestData.id*/,
					this.m_otp,
				),
			);
			if (!response || !response.state) {
				this.toastError(this.$t("error.load_file"));
				return [];
			}
			this.signFiles = response.data;
			// let raw = response.data.filter(
			// 	(ele) => ele.tennantCode != "CUSTOMER",
			// );
			// let signed = response.data.filter(
			// 	(ele) => ele.signOfFile && ele.tennantCode != "CUSTOMER",
			// );
			// this.signFiles = [];
			// for (let file of raw) {
			// 	let index = signed.findIndex((e) =>
			// 		`${e.signOfFile}`.includes(`${file.id}`),
			// 	);
			// 	if (index >= 0) {
			// 		continue;
			// 	}
			// 	this.signFiles.push(file);
			// }
		},

		async signTokenMofiFone() {
			try {
				let responseCert = await globalService.getDataOutside_Async(
					signApi.MobiFone_GetCert(),
				);
				if (!responseCert) {
					this.toastError(
						this.$t("message.need_install_token_plugin"),
					);
					return false;
				}
				await this.getFiles();
				for (let file of this.signFiles) {
					let res = await globalService.getData_Async(
						customerAPI.API_GetHashFile(file.id, this.m_otp),
					);
					let dataSign = {
						fileData: res.data ? res.data : "",
						certSerial: responseCert.Serial,
						signDate: null,
						fieldName: "",
						typeSign: "4",
						page: "1",
						px: 0,
						py: 0,
						pw: 100,
						ph: 100,
						imageData: constant.signedImage,
					};
					let signed = await globalService.postDataOutside_Async(
						signApi.MobiFone_SignPDF(),
						dataSign,
					);
					if (!signed || !signed.Status || signed.Status != 2) {
						return false;
					}
					if (!signed || !signed.FileDataSigned) {
						this.toastError(
							this.$t("message.need_install_token_plugin"),
						);
						return false;
					}
					if (this.m_requestData) {
						this.signDto.requestDataId = this.m_requestData.id;
					}
					this.signDto.fileDataBase64 = signed.FileDataSigned;
					this.signDto.attachmentFileId = file.id;
					this.signDto.userId = null;
					let response = await globalService.postData_Async(
						customerAPI.API_SignAnonymous(this.m_otp),
						this.signDto,
					);
					if (!response || !response.state) {
						return false;
					}
				}
				return true;
			} catch (error) {
				console.log(error);
				return false;
			}
		},

		async signTokenViettel() {
			try {
				let responseToken = await globalService.getDataOutside_Async(
					signApi.Viettel_GetToken(),
				);
				if (!responseToken) {
					this.toastError(
						this.$t("message.need_install_token_plugin"),
					);
					return false;
				}

				let responseCert = await globalService.postDataOutside_Async(
					signApi.Viettel_GetCert(),
					{ token: responseToken },
				);
				if (!responseCert) {
					this.toastError(
						this.$t("message.need_install_token_plugin"),
					);
					return false;
				}

				await this.getFiles();
				for (let file of this.signFiles) {
					let res = await globalService.getData_Async(
						customerAPI.API_GetHashFile(file.id, this.m_otp),
					);
					let dataSign = {
						token: responseToken,
						serialNumber: responseCert,
						data: res.data,
					};
					let signed = await globalService.postDataOutside_Async(
						signApi.Viettel_SignHash(),
						dataSign,
					);

					if (!signed) {
						console.log("signTokenViettel() signed: ", signed);
						return false;
					}

					if (!signed || !signed.FileDataSigned) {
						this.toastError(
							this.$t("message.need_install_token_plugin"),
						);
						return false;
					}
					if (this.m_requestData) {
						this.signDto.requestDataId = this.m_requestData.id;
					}
					this.signDto.userId = null;
					this.signDto.fileDataBase64 = signed.FileDataSigned;
					this.signDto.attachmentFileId = file.id;
					let response = await globalService.postData_Async(
						customerAPI.API_SignAnonymous(this.m_otp),
						this.signDto,
					);
					if (!response || response.state) {
						this.toastError(this.$t("error.sign"));
						return false;
					}
					return true;
				}
			} catch (error) {
				console.log(error);
				return false;
			}
			return false;
		},
	},
};
</script>

<style lang="scss" scoped></style>
